"use strict";(self.webpackChunkw3f_education=self.webpackChunkw3f_education||[]).push([[5088],{3905:function(e,t,r){r.d(t,{Zo:function(){return m},kt:function(){return h}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),u=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=u(r),h=n,d=p["".concat(l,".").concat(h)]||p[h]||c[h]||o;return r?a.createElement(d,i(i({ref:t},m),{},{components:r})):a.createElement(d,i({ref:t},m))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var u=2;u<o;u++)i[u]=r[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},6885:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return m},default:function(){return p}});var a=r(7462),n=r(3366),o=(r(7294),r(3905)),i=["components"],s={id:"why-rust",title:"Why Learn Rust?",sidebar_label:"Why Learn Rust?",description:"A brief overview of the pros of learning the Rust programming language."},l=void 0,u={unversionedId:"Rust/section1/why-rust",id:"Rust/section1/why-rust",isDocsHomePage:!1,title:"Why Learn Rust?",description:"A brief overview of the pros of learning the Rust programming language.",source:"@site/docs/Rust/section1/why-rust.md",sourceDirName:"Rust/section1",slug:"/Rust/section1/why-rust",permalink:"/w3f-education/docs/Rust/section1/why-rust",editUrl:"https://github.com/w3f/w3f-education/edit/main/docs/Rust/section1/why-rust.md",version:"current",lastUpdatedBy:"Bader Youssef",lastUpdatedAt:1678903548,formattedLastUpdatedAt:"3/15/2023",frontMatter:{id:"why-rust",title:"Why Learn Rust?",sidebar_label:"Why Learn Rust?",description:"A brief overview of the pros of learning the Rust programming language."},sidebar:"rust",previous:{title:"What is Rust?",permalink:"/w3f-education/docs/Rust/section1/what-is-rust"},next:{title:"WASM TLDR",permalink:"/w3f-education/docs/Rust/section1/wasm-tldr"}},m=[{value:"Rust is safe.",id:"rust-is-safe",children:[]},{value:"Safety does not sacrifice readability, ease of use, or speed.",id:"safety-does-not-sacrifice-readability-ease-of-use-or-speed",children:[]},{value:"Rust Safety by Example",id:"rust-safety-by-example",children:[]},{value:"Resources",id:"resources",children:[]}],c={toc:m};function p(e){var t=e.components,r=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Before starting your Rust development journey, it is essential to realize just precisely ",(0,o.kt)("em",{parentName:"p"},"why")," Rust was the language chosen for this course.  In fact, it could have been any other language, If you are new to programming, the reasons as to why Rust was chosen may be foreign."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"It may be useful to know a few terms general programming terms and what they mean before learning more about Rust."))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"A ",(0,o.kt)("strong",{parentName:"p"},"programming language")," is a way for humans to write instructions for a computer to follow. Programming languages are very exact, and similar to linguistical languages like English, Spanish, or French, contain a set of rules as to how a program should be written.  This is called the ",(0,o.kt)("strong",{parentName:"p"},"syntax")," of the program.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"A ",(0,o.kt)("strong",{parentName:"p"},"compiler")," is special program that translates the code we write, whether it be Rust or something else, into something a computer can understand (machine code). It acts as a translator between human code and the machine. ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"There are two phases of a program - ",(0,o.kt)("strong",{parentName:"p"},"compile-time"),", and ",(0,o.kt)("strong",{parentName:"p"},"runtime"),".  Compile-time is when the code that a human writes is converted to machine code.  Runtime refers to the period of time when the program, after it has been compiled, has been running. ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"A ",(0,o.kt)("strong",{parentName:"p"},"garbage collector")," manages the memory of a program, i.e, when and where memory should be allocated and released.  The benefit of a garbage collector is that the programmer doesn't have to account for how to allocate memory within code."))),(0,o.kt)("h2",{id:"rust-is-safe"},"Rust is safe."),(0,o.kt)("p",null,"The primary reason why Rust is used widely is how ",(0,o.kt)("strong",{parentName:"p"},"safe")," it is. In the context of programming, ",(0,o.kt)("strong",{parentName:"p"},"safe")," means that the programmer can confidently write a program with the certainty that it will work as intended. In more technical terms, a safe language ensures memory safety, and a safe language cannot write a dangerous program (unless those safety features are bypassed)."),(0,o.kt)("p",null,"This safeness is mostly derived from two factors that work in tandem: "),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Rust's strict type system"),(0,o.kt)("li",{parentName:"ol"},"Rust's robust and pedantic compiler checks every single line of code to ensure it won't be invalid now, ",(0,o.kt)("em",{parentName:"li"},"or")," in the future.")),(0,o.kt)("p",null,"Essentially, if the Rust compiler that an issue might happen at some point with a variable within your program, it will (in a very friendly way) notify the programmer that this would become an issue in runtime."),(0,o.kt)("p",null,"Safe programming is also a matter of security. Many exploits and hacks occur because the program's memory can be accessed and modified in an unsafe or unauthorized way. "),(0,o.kt)("p",null,"These factors are crucial when building applications and programs that make guarantees in impactful industries. The Rust compiler's strictness makes it very hard to write ",(0,o.kt)("em",{parentName:"p"},"bad")," or ",(0,o.kt)("em",{parentName:"p"},"dangerous")," code."),(0,o.kt)("h2",{id:"safety-does-not-sacrifice-readability-ease-of-use-or-speed"},"Safety does not sacrifice readability, ease of use, or speed."),(0,o.kt)("p",null,"Because Rust is so strict at compile-time, there is no need for a ",(0,o.kt)("strong",{parentName:"p"},"garbage collector"),", or any other mechanism that operates with the runtime of the program.  Effectively, this means that all of Rust's powerful, strong typing system comes at effectively zero cost."),(0,o.kt)("p",null,"This allows for a level of control that can be comparable to something lower-level, such as C, but is much more beginner friendly in terms of writing useful programs.  It also allows for flexibility for applications that require granular control and resource management, such as embedded systems, operating systems, and distributed ledgers."),(0,o.kt)("p",null,"Rust lowers the barriers when dealing with more complex concepts such as concurrency, low-level memory management, and data representation."),(0,o.kt)("h2",{id:"rust-safety-by-example"},"Rust Safety by Example"),(0,o.kt)("p",null,"Take this example - if we try to compile this Rust code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"    // Here, the number five variable is, well, the number 5. It is a number that can be added and subtracted.\n    let the_number_five: u32 = 5;\n    // Here is another variable - but instead, it's a character, as denoted by the `char` type, and the single\n    // quotes surrounding the 5 ('5')\n    let imposter_number_five: char = '5';\n    // Lets say we want to add them - this shouldn't work, as this is the same as trying to add a number \n    // to a word.\n    let the_number_ten: u32 = the_number_five + imposter_number_five;\n    // FAILURE!\n    println!(\"{the_number_ten}\");\n")),(0,o.kt)("p",null,"The Rust compiler, before it can even run the program, gives a very detailed error as to ",(0,o.kt)("em",{parentName:"p"},"why")," this is impossible to compile.  This may seem foreign right now.  Notice the level of detail the compiler gives to the programmer, including a reference as to why this may not compile."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"  Compiling playground v0.0.1 (/playground)\nerror[E0277]: cannot add `char` to `u32`\n --\x3e src/main.rs:5:38\n  |\n5 | let the_number_ten = the_number_five + imposter_number_five;\n  |                                      ^ no implementation for `u32 + char`\n  |\n  = help: the trait `Add<char>` is not implemented for `u32`\n  = help: the following other types implement trait `Add<Rhs>`:\n            <&'a u32 as Add<u32>>\n            <&u32 as Add<&u32>>\n            <u32 as Add<&u32>>\n            <u32 as Add>\n\nFor more information about this error, try `rustc --explain E0277`.\n")),(0,o.kt)("h2",{id:"resources"},"Resources"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"Why Rust? by Dimitiy Kashitsyn at Parity Technologies")," - ",(0,o.kt)("a",{parentName:"li",href:"https://www.parity.io/blog/why-rust"},"https://www.parity.io/blog/why-rust"))))}p.isMDXComponent=!0}}]);